package com.heiliuer.fuda_zaoan.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.heiliuer.fuda_zaoan.SignRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SignRecord".
*/
public class SignRecordDao extends AbstractDao<SignRecord, Long> {

    public static final String TABLENAME = "SignRecord";

    /**
     * Properties of entity SignRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property CreateTime = new Property(1, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property SignTime = new Property(2, Long.class, "signTime", false, "SIGN_TIME");
        public final static Property Success = new Property(3, Boolean.class, "success", false, "SUCCESS");
        public final static Property AutoSigned = new Property(4, Boolean.class, "autoSigned", false, "AUTO_SIGNED");
        public final static Property SignDate = new Property(5, String.class, "signDate", false, "SIGN_DATE");
        public final static Property LogJson = new Property(6, String.class, "logJson", false, "LOG_JSON");
    };


    public SignRecordDao(DaoConfig config) {
        super(config);
    }
    
    public SignRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SignRecord\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CREATE_TIME\" INTEGER," + // 1: createTime
                "\"SIGN_TIME\" INTEGER," + // 2: signTime
                "\"SUCCESS\" INTEGER," + // 3: success
                "\"AUTO_SIGNED\" INTEGER," + // 4: autoSigned
                "\"SIGN_DATE\" TEXT," + // 5: signDate
                "\"LOG_JSON\" TEXT);"); // 6: logJson
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_SignRecord_ID ON SignRecord" +
                " (\"ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SignRecord\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SignRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(2, createTime);
        }
 
        Long signTime = entity.getSignTime();
        if (signTime != null) {
            stmt.bindLong(3, signTime);
        }
 
        Boolean success = entity.getSuccess();
        if (success != null) {
            stmt.bindLong(4, success ? 1L: 0L);
        }
 
        Boolean autoSigned = entity.getAutoSigned();
        if (autoSigned != null) {
            stmt.bindLong(5, autoSigned ? 1L: 0L);
        }
 
        String signDate = entity.getSignDate();
        if (signDate != null) {
            stmt.bindString(6, signDate);
        }
 
        String logJson = entity.getLogJson();
        if (logJson != null) {
            stmt.bindString(7, logJson);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SignRecord readEntity(Cursor cursor, int offset) {
        SignRecord entity = new SignRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // createTime
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // signTime
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // success
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // autoSigned
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // signDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // logJson
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SignRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreateTime(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setSignTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setSuccess(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setAutoSigned(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setSignDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLogJson(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SignRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SignRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
